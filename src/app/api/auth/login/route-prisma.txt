import { NextResponse } from "next/server";
import { PrismaClient, User } from "@prisma/client";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

interface LoginBody {
  username?: string;
  email?: string;
  password: string;
}

interface LoginError {
  error: string;
}

export async function POST(req: Request) {
  try {
    const body: LoginBody = await req.json();
    const { username, email, password } = body;

    if ((!username && !email) || !password) {
      return NextResponse.json<LoginError>(
        { error: "Usuario/email y contraseña son requeridos" },
        { status: 400 }
      );
    }

    // Buscar usuario
    const user: User | null = await prisma.user.findFirst({
      where: {
        OR: [{ username }, { email }],
      },
    });

    if (!user) {
      return NextResponse.json<LoginError>(
        { error: "Usuario no registrado" },
        { status: 404 }
      );
    }

    // Validar contraseña
    const isValid = await bcrypt.compare(password, user.password);
    if (!isValid) {
      return NextResponse.json<LoginError>(
        { error: "Credenciales incorrectas" },
        { status: 401 }
      );
    }

    // Generar token JWT
    const token = jwt.sign(
      { id: user.id, username: user.username },
      process.env.JWT_SECRET || "secreto",
      { expiresIn: "1h" }
    );

    // Quitar password de la respuesta
    const { password: _, ...userSafe } = user;

    // Crear respuesta
    const response = NextResponse.json(
      {
        message: "Login exitoso",
        user: userSafe,
      },
      { status: 200 }
    );

    // Guardar cookie "sesion"
    response.cookies.set("sesion", token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "strict",
      path: "/",
      maxAge: 60 * 60, // 1h
    });

    return response;
  } catch (error) {
    console.error("Error en login:", error);
    return NextResponse.json<LoginError>(
      { error: "Error interno del servidor" },
      { status: 500 }
    );
  }
}
